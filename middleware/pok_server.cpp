// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/PokServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::poke_bat::middleware;

class PokServerHandler : virtual public PokServerIf {
 public:
  PokServerHandler() {
    // Your initialization goes here
  }

  void getConfig(Config& _return) {
    // Your implementation goes here
    printf("getConfig\n");
  }

  void startFight(Pokemon& _return, const int64_t complexity, const Pokemon& clientPokemon) {
    // Your implementation goes here
    printf("startFight\n");
  }

  void punch(RoundResult& _return) {
    // Your implementation goes here
    printf("punch\n");
  }

  void defend(RoundResult& _return) {
    // Your implementation goes here
    printf("defend\n");
  }

  void useSkill(RoundResult& _return, const std::string& skillName) {
    // Your implementation goes here
    printf("useSkill\n");
  }

};

//int main(int argc, char **argv) {
//  int port = 9090;
//  ::apache::thrift::stdcxx::shared_ptr<PokServerHandler> handler(new PokServerHandler());
//  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new PokServerProcessor(handler));
//  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
//  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
//  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
//
//  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
//  server.serve();
//  return 0;
//}

