// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/PokServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "fight.h"

#include "pok_server.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::poke_bat::middleware;

Fight PokServerHandler::findFight(const int64_t &fight_id)
{
    //printf("%lu", fight_storage.find(fight_id)->first);
    return fight_storage.at(fight_id);
}

PokServerHandler::PokServerHandler() : next_fight_id(0)
{
}

void PokServerHandler::getConfig(Config& _return)
{
  // Your implementation goes here
    printf("getConfig\n");
    Pokemon pok;
    _return.__set_pokemon(pok);
    _return.__set_victories(0);
    _return.__set_defeats(11);
}

void PokServerHandler::startFight(FightData& _return, const int64_t complexity, const Pokemon& clientPokemon)
{
  //TODO extract from DB (complexity)
  Fight fight(clientPokemon, _return.pokemon);
  fight_storage.emplace(next_fight_id, fight);

  printf("%s\n", clientPokemon.name.c_str());

  _return.__set_fight_id(next_fight_id);
  ++next_fight_id;
}

void PokServerHandler::punch(RoundResult& _return, const int64_t fight_id)
{
  // Your implementation goes here
    Fight current_fight = findFight(fight_id);
    auto& c_pok = current_fight.client_pokemon_;
    auto& s_pok = current_fight.server_pokemon_;
    
    printf("punch\n");
    
}

void PokServerHandler::defend(RoundResult& _return, const int64_t fight_id)
{
  // Your implementation goes here
  findFight(fight_id);
  printf("defend\n");
}

void PokServerHandler::useSkill(RoundResult& _return, const int64_t fight_id, const std::string& skillName)
{
  // Your implementation goes here
  findFight(fight_id);
  printf("useSkill\n");
}
