// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/PokServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "fight.h"

#include "pok_server.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::poke_bat::middleware;



PokServerHandler::PokServerHandler() : last_fight_id(0)
{
}

void PokServerHandler::getConfig(Config& _return)
{
  // Your implementation goes here
    printf("getConfig\n");
    Pokemon pok;
    _return.__set_pokemon(pok);
    _return.__set_victories(0);
    _return.__set_defeats(11);
}

void PokServerHandler::startFight(Pokemon& _return, const int64_t complexity, const Pokemon& clientPokemon)
{
  //TODO extract from DB (complexity)
  Fight fight(clientPokemon, _return);
  fight_storage.emplace(last_fight_id++, fight);   
}

void PokServerHandler::punch(RoundResult& _return)
{
  // Your implementation goes here
  printf("punch\n");
}

void PokServerHandler::defend(RoundResult& _return)
{
  // Your implementation goes here
  printf("defend\n");
}

void PokServerHandler::useSkill(RoundResult& _return, const std::string& skillName)
{
  // Your implementation goes here
  printf("useSkill\n");
}
