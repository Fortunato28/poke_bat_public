#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class PokemonType(object):
    NORMAL = 0
    FIRE = 1
    WATER = 2
    GRASS = 3
    ELECTRIC = 4
    ICE = 5
    FIGHTING = 6
    POISON = 7
    GROUND = 8
    FLYING = 9
    PSYCHIC = 10
    BUG = 11
    ROCK = 12
    GHOST = 13
    DARK = 14
    DRAGON = 15
    STEEL = 16
    FAIRY = 17

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "FIRE",
        2: "WATER",
        3: "GRASS",
        4: "ELECTRIC",
        5: "ICE",
        6: "FIGHTING",
        7: "POISON",
        8: "GROUND",
        9: "FLYING",
        10: "PSYCHIC",
        11: "BUG",
        12: "ROCK",
        13: "GHOST",
        14: "DARK",
        15: "DRAGON",
        16: "STEEL",
        17: "FAIRY",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "FIRE": 1,
        "WATER": 2,
        "GRASS": 3,
        "ELECTRIC": 4,
        "ICE": 5,
        "FIGHTING": 6,
        "POISON": 7,
        "GROUND": 8,
        "FLYING": 9,
        "PSYCHIC": 10,
        "BUG": 11,
        "ROCK": 12,
        "GHOST": 13,
        "DARK": 14,
        "DRAGON": 15,
        "STEEL": 16,
        "FAIRY": 17,
    }


class SkillType(object):
    ATTACK = 0
    BUFF = 1
    DEBUFF = 2

    _VALUES_TO_NAMES = {
        0: "ATTACK",
        1: "BUFF",
        2: "DEBUFF",
    }

    _NAMES_TO_VALUES = {
        "ATTACK": 0,
        "BUFF": 1,
        "DEBUFF": 2,
    }


class PokemonSkill(object):
    """
    Attributes:
     - name
     - type
     - amount

    """


    def __init__(self, name=None, type=None, amount=None,):
        self.name = name
        self.type = type
        self.amount = amount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.amount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PokemonSkill')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.I64, 4)
            oprot.writeI64(self.amount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.amount is None:
            raise TProtocolException(message='Required field amount is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Pokemon(object):
    """
    Attributes:
     - name
     - type
     - HP
     - attack
     - defense
     - spell_attack
     - spell_defense
     - speed
     - EXP
     - LVL
     - skill
     - flag
     - pub_id

    """


    def __init__(self, name=None, type=None, HP=None, attack=None, defense=None, spell_attack=None, spell_defense=None, speed=None, EXP=None, LVL=None, skill=None, flag=None, pub_id=None,):
        self.name = name
        self.type = type
        self.HP = HP
        self.attack = attack
        self.defense = defense
        self.spell_attack = spell_attack
        self.spell_defense = spell_defense
        self.speed = speed
        self.EXP = EXP
        self.LVL = LVL
        self.skill = skill
        self.flag = flag
        self.pub_id = pub_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.HP = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.attack = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.defense = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.spell_attack = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.spell_defense = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.speed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.EXP = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.LVL = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.skill = PokemonSkill()
                    self.skill.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.flag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.pub_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Pokemon')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.HP is not None:
            oprot.writeFieldBegin('HP', TType.I64, 3)
            oprot.writeI64(self.HP)
            oprot.writeFieldEnd()
        if self.attack is not None:
            oprot.writeFieldBegin('attack', TType.I64, 4)
            oprot.writeI64(self.attack)
            oprot.writeFieldEnd()
        if self.defense is not None:
            oprot.writeFieldBegin('defense', TType.I64, 5)
            oprot.writeI64(self.defense)
            oprot.writeFieldEnd()
        if self.spell_attack is not None:
            oprot.writeFieldBegin('spell_attack', TType.I64, 6)
            oprot.writeI64(self.spell_attack)
            oprot.writeFieldEnd()
        if self.spell_defense is not None:
            oprot.writeFieldBegin('spell_defense', TType.I64, 7)
            oprot.writeI64(self.spell_defense)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.I64, 8)
            oprot.writeI64(self.speed)
            oprot.writeFieldEnd()
        if self.EXP is not None:
            oprot.writeFieldBegin('EXP', TType.I64, 9)
            oprot.writeI64(self.EXP)
            oprot.writeFieldEnd()
        if self.LVL is not None:
            oprot.writeFieldBegin('LVL', TType.I64, 10)
            oprot.writeI64(self.LVL)
            oprot.writeFieldEnd()
        if self.skill is not None:
            oprot.writeFieldBegin('skill', TType.STRUCT, 11)
            self.skill.write(oprot)
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.STRING, 12)
            oprot.writeString(self.flag.encode('utf-8') if sys.version_info[0] == 2 else self.flag)
            oprot.writeFieldEnd()
        if self.pub_id is not None:
            oprot.writeFieldBegin('pub_id', TType.STRING, 13)
            oprot.writeString(self.pub_id.encode('utf-8') if sys.version_info[0] == 2 else self.pub_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.HP is None:
            raise TProtocolException(message='Required field HP is unset!')
        if self.attack is None:
            raise TProtocolException(message='Required field attack is unset!')
        if self.defense is None:
            raise TProtocolException(message='Required field defense is unset!')
        if self.EXP is None:
            raise TProtocolException(message='Required field EXP is unset!')
        if self.LVL is None:
            raise TProtocolException(message='Required field LVL is unset!')
        if self.skill is None:
            raise TProtocolException(message='Required field skill is unset!')
        if self.flag is None:
            raise TProtocolException(message='Required field flag is unset!')
        if self.pub_id is None:
            raise TProtocolException(message='Required field pub_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoundResult(object):
    """
    Attributes:
     - clientPokemon
     - serverPokemon
     - actionResultDescription

    """


    def __init__(self, clientPokemon=None, serverPokemon=None, actionResultDescription=None,):
        self.clientPokemon = clientPokemon
        self.serverPokemon = serverPokemon
        self.actionResultDescription = actionResultDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.clientPokemon = Pokemon()
                    self.clientPokemon.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serverPokemon = Pokemon()
                    self.serverPokemon.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.actionResultDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoundResult')
        if self.clientPokemon is not None:
            oprot.writeFieldBegin('clientPokemon', TType.STRUCT, 1)
            self.clientPokemon.write(oprot)
            oprot.writeFieldEnd()
        if self.serverPokemon is not None:
            oprot.writeFieldBegin('serverPokemon', TType.STRUCT, 2)
            self.serverPokemon.write(oprot)
            oprot.writeFieldEnd()
        if self.actionResultDescription is not None:
            oprot.writeFieldBegin('actionResultDescription', TType.STRING, 3)
            oprot.writeString(self.actionResultDescription.encode('utf-8') if sys.version_info[0] == 2 else self.actionResultDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.clientPokemon is None:
            raise TProtocolException(message='Required field clientPokemon is unset!')
        if self.serverPokemon is None:
            raise TProtocolException(message='Required field serverPokemon is unset!')
        if self.actionResultDescription is None:
            raise TProtocolException(message='Required field actionResultDescription is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FightData(object):
    """
    Attributes:
     - pokemon
     - fight_id

    """


    def __init__(self, pokemon=None, fight_id=None,):
        self.pokemon = pokemon
        self.fight_id = fight_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pokemon = Pokemon()
                    self.pokemon.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fight_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FightData')
        if self.pokemon is not None:
            oprot.writeFieldBegin('pokemon', TType.STRUCT, 1)
            self.pokemon.write(oprot)
            oprot.writeFieldEnd()
        if self.fight_id is not None:
            oprot.writeFieldBegin('fight_id', TType.I64, 2)
            oprot.writeI64(self.fight_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.pokemon is None:
            raise TProtocolException(message='Required field pokemon is unset!')
        if self.fight_id is None:
            raise TProtocolException(message='Required field fight_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PokemonSkill)
PokemonSkill.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    None,  # 3
    (4, TType.I64, 'amount', None, None, ),  # 4
)
all_structs.append(Pokemon)
Pokemon.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.I64, 'HP', None, None, ),  # 3
    (4, TType.I64, 'attack', None, None, ),  # 4
    (5, TType.I64, 'defense', None, None, ),  # 5
    (6, TType.I64, 'spell_attack', None, None, ),  # 6
    (7, TType.I64, 'spell_defense', None, None, ),  # 7
    (8, TType.I64, 'speed', None, None, ),  # 8
    (9, TType.I64, 'EXP', None, None, ),  # 9
    (10, TType.I64, 'LVL', None, None, ),  # 10
    (11, TType.STRUCT, 'skill', [PokemonSkill, None], None, ),  # 11
    (12, TType.STRING, 'flag', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'pub_id', 'UTF8', None, ),  # 13
)
all_structs.append(RoundResult)
RoundResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'clientPokemon', [Pokemon, None], None, ),  # 1
    (2, TType.STRUCT, 'serverPokemon', [Pokemon, None], None, ),  # 2
    (3, TType.STRING, 'actionResultDescription', 'UTF8', None, ),  # 3
)
all_structs.append(FightData)
FightData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'pokemon', [Pokemon, None], None, ),  # 1
    (2, TType.I64, 'fight_id', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
